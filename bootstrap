#!/bin/bash
#
# Installation bootstrap script.
#
# Arguments:
#
#    runtime-dir
#    optional path defining top-of-release
#
# The top-of-release path will be set to the output of /bin/pwd;
# it may be specified if (due to automounters, for instance) /bin/pwd
# returns an unacceptable form of the path.
#

fail () {
    echo $1 1>&2
    exit 1
}

wrap_perl () {
    src=$1
    dst=$2
    cat > $dst <<EOF
#!/bin/sh
export KB_TOP=$top_dir
export KB_RUNTIME="$rt_dir"
export KB_PERL_PATH=$perl_lib
export KB_PYTHON_PATH=$python_lib
export KB_R_PATH=$rscript_lib
"$rt_dir"/bin/perl $top_dir/$src "\$@"
EOF
    chmod +x $dst
}

wrap_sh () {
    src=$1
    dst=$2
    cat > $dst <<EOF
#!/bin/sh
export KB_TOP=$top_dir
export KB_RUNTIME="$rt_dir"
export KB_PERL_PATH=$perl_lib
export KB_PYTHON_PATH=$python_lib
export KB_R_PATH=$rscript_lib
bash $top_dir/$src "\$@"
EOF
    chmod +x $dst
}

if [ $# -lt 1 ] ; then
    if [ ! -L runtime ] ; then
	fail "Usage: $0 runtime-dir [top-dir]"
    fi
    rt_dir=`readlink runtime`
    top_dir=`pwd`
else
    rt_dir=$1
    top_dir=$2
fi


if [ "$top_dir" = "" ] ; then
    top_dir=`pwd`
fi

if [ ! -d "$rt_dir" ] ; then
    fail "Runtime directory $rt_dir does not exist"
fi

if [ ! -x "$rt_dir"/bin/perl ] ; then
    fail "Runtime directory $rt_dir does not contain an executable perl"
fi

if [ -d $top_dir/runtime ] ; then
    t=`readlink $top_dir/runtime`
    if [ "$t" != "$rt_dir" ] ; then
	fail "Runtime already configured; remove $top_dir/runtime if you wish to re-bootstrap."
    fi
fi

#if [ ! -x "$rt_dir"/java/bin/javac ] ; then
#    fail "Runtime directory $rt_dir does not contain an executable javac"
#fi

#
# Check for homebrew and the installation of bv-brc-dev
#
if [ -x "$rt_dir/bin/brew" ] ; then
    if $rt_dir/bin/brew info bv-brc-dev > /tmp/brew.$$ ; then
	echo "Have homebrew"
	homebrew_dir=`perl -ne 'm#^(/\S+) \([0-9,]+ files# && print "$1\n"' /tmp/brew.$$`
    fi
    rm -f /tmp/brew.$$
fi


#if [ ! -x "$rt_dir"/glassfish3/bin/asadmin ] ; then
#    fail "Runtime directory $rt_dir does not contain an executable asadmin"
#fi

#
# Check for the existence of our dependencies.
#
missing_deps=""
for moddir in modules/* ; do
    if [ -f $moddir/DEPENDENCIES ] ; then
	mod=`basename $moddir`
	for dep in `cat $moddir/DEPENDENCIES`; do 
	    if [ ! -d modules/$dep ] ; then
		missing_deps="$missing_deps $mod:$dep"
	    fi
	done
    fi
done

if [ "$missing_deps" != "" ] ; then
    echo "ERROR: The following modules were listed as dependencies but were not present in the modules directory:" 1>&2
    for missing in $missing_deps; do
    	echo $missing | sed -e 's/\(.*\):/   from module \1: /' 1>&2
    done
    if [ "$KB_IGNORE_MISSING_DEPENDENCIES" ] ; then
	echo "Ignoring missing dependencies."
    else
	echo "Please check these modules out and rerun '$0'"
	exit 1
    fi
fi


if [ ! -h $top_dir/runtime ] ; then
    ln -s "$rt_dir" $top_dir/runtime
fi

#
# Construct a CLASSPATH from the runtime's libdir and from the
# libdirs of the modules we have.
#
# There is a subtlety here involving the wildcard path. Ant will not
# expand wildcards that come in from the classpath, so this classpath
# is really useless to it. However, since we know the runtime in a dev
# container is linked to $KB_TOP/runtime, we can hand that to ant as
# the top of a hierarchy to search for jar files.
#
classpath="\$KB_RUNTIME/lib/*"
for moddir in modules/* ; do
    p=$top_dir/$moddir
    if [ -d $p ] ; then
	elt="\$KB_TOP/$moddir/dist/lib"
	classpath="${classpath}:$elt/*"
    fi
done

#
# Check for our ubuntu openjdk build. We will need to explicitly
# add the jackson jars to the classpath. 
#
if java -version > /tmp/java.$$ 2>&1 ; then
    if [[ $(cat /tmp/java.$$) =~ OpenJDK ]] ; then
	for jar in jackson-core.jar jackson-mapper.jar ; do
	    sjar="/usr/share/java/$jar"
	    if [[ -f $sjar ]] ; then
		classpath="${classpath}:$sjar"
	    fi
	done
    fi
fi
rm -f /tmp/java.$$ 

#
# Configure the appropriate JAVA_HOME.
#
# If we come in with a JAVA_HOME set, use that. 
#

java_path=''
if [ "$JAVA_HOME" = "" ] ; then
    if [ -d "$rt_dir/java" ] ; then
	elt="\$KB_RUNTIME/java"
	java_path=$elt
    elif [ -x /usr/libexec/java_home ] ; then
	java_path=`/usr/libexec/java_home 2>&1`
	if [[ "$java_path" =~ Unable ]] ; then
	    java_path=''
        fi
    elif [ -d "/Library/Java/Home" ] ; then
	# Mac
	java_path="/Library/Java/Home"
    else 
	# Modern java shouldn't need JAVA_HOME
	true;
    fi
else
	java_path="$JAVA_HOME"
fi

modlist=""
modlistc=""
perl_lib=""
for moddir in modules/* ; do
    p=$top_dir/$moddir/lib
    if [ -d $p ] ; then
	elt="\$KB_TOP/$moddir/lib"
	if [ "$perl_lib" = "" ] ; then perl_lib=$elt ; else perl_lib="$perl_lib:$elt" ; fi
        modname=`basename $moddir`
        if [ "$modlist" = "" ] ; then modlist=$modname ; else modlist="$modlist $modname" ; fi
        if [ "$modlistc" = "" ] ; then modlistc=$modname ; else modlistc="$modlistc, $modname" ; fi
    fi
done

dcfg=$top_dir/bootstrap.cfg
cat > $dcfg <<EOF

[default]

target = /kb/deployment
deploy-runtime = "$rt_dir"

deploy-client = $modlistc
deploy-service =

EOF

for mod in $modlist ; do
    md=modules/$mod
    if [ -f "$md/deploy.cfg" ] ; then
        cat $md/deploy.cfg >> $dcfg
    else
        echo "[$mod]" >> $dcfg
    fi
    echo "" >> $dcfg
done

#
# Construct python path
#

python_lib=""
for moddir in modules/* ; do
    p=$top_dir/$moddir/lib
    if [ -d $p ] ; then
	elt="\$KB_TOP/$moddir/lib"
	if [ "$python_lib" = "" ] ; then python_lib=$elt ; else python_lib="$python_lib:$elt" ; fi
    fi
done

#
# Construct rscript path
#

rscript_lib="$rt_dir/lib/R/library"
for moddir in modules/* ; do
    p=$top_dir/$moddir/lib
    if [ -d $p ] ; then
	elt="\$KB_TOP/$moddir/lib"
	if [ "$rscript_lib" = "" ] ; then rscript_lib=$elt ; else rscript_lib="$rscript_lib:$elt" ; fi
    fi
done

#
# Wrap scripts.
#

for script in tools/*.pl ; do
    if [ -f $script ] ; then
	base=`basename $script .pl`
	wrap_perl $script tools/$base
    fi
done

for script in tools/*.sh ; do
    if [ -f $script ] ; then
	base=`basename $script .sh`
	wrap_sh $script tools/$base
    fi
done

path_str="\$KB_RUNTIME/bin:\$KB_TOP/bin"
if [ "x$homebrew_dir" != "x" ] ; then
    path_str="$path_str:$homebrew_dir/libexec/bin"
    export PERL5LIB_ADDITIONS="$homebrew_dir/libexec/lib/perl5"
    perl_lib="$perl_lib:$homebrew_dir/libexec/lib/perl5"
fi
if [ "x$JAVA_HOME" != "x" ] ; then
    path_str="$path_str:\$JAVA_HOME/bin"
fi

path_str="$path_str:\$PATH"

cat > $top_dir/user-env.sh <<EOF
export KB_TOP=$top_dir
export KB_RUNTIME="$rt_dir"
export KB_PERL_PATH=$perl_lib
export KB_PYTHON_PATH=$python_lib
export KB_R_PATH=$rscript_lib
if [ "$java_path" != "" -a -e "$java_path" ] ; then
    export JAVA_HOME=$java_path
fi
if [ -e "$tomcat_path" ] ; then
    export CATALINA_HOME=$tomcat_path
fi
export PATH=$path_str
export PERL5LIB=\$KB_PERL_PATH
export PYTHONPATH=\$KB_PYTHON_PATH:\$PYTHONPATH
export R_LIBS=\$KB_R_PATH:\$R_LIBS
export CLASSPATH=$classpath

if [ -f \$KB_TOP/setenv.sh ] ; then
  . \$KB_TOP/setenv.sh
fi

hash -r
EOF

cat > $top_dir/user-env.csh <<EOF
setenv KB_TOP $top_dir
setenv KB_RUNTIME "$rt_dir"
setenv KB_PERL_PATH $perl_lib
setenv KB_PYTHON_PATH $python_lib
setenv KB_R_PATH $rscript_lib
setenv JAVA_HOME $java_path
setenv CATALINA_HOME $tomcat_path
setenv PATH $path_str
setenv PERL5LIB \$KB_PERL_PATH
setenv PYTHONPATH \$KB_PYTHON_PATH:\$PYTHONPATH
setenv R_LIBS \$KB_R_PATH:\$R_LIBS
setenv GLASSFISH_HOME \$KB_RUNTIME/glassfish3
setenv CLASSPATH $classpath
rehash
EOF

